{
        "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "New async function": {
        "prefix": "adef",
        "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for async function definition."
    },
    "New property": {
        "prefix": "property",
        "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
        "description": "New property: get and set via decorator"
    },
    "New froperty": {
        "prefix": "property",
        "body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
        "description" : ""
    },
    "New enum": {
        "prefix": "enum",
        "body": [
            "from enum import Enum\n\n",
            "class ${1:MyEnum}(Enum):",
            "\t\"\"\"${2:Docstring for $1.}\"\"\"",
            "\t${3:FIRST_ENUM} = \"some_value\"",
            "\t${4:SECOND_ENUM} = \"some_other_value\"",
            "\t$0"
        ],
        "description": "Code snippet for enum definition."
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet for the if statement."
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
        "description" : "Code snippet to create a for loop structure."
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet to create a while loop structure."
    },
    "dowhile": {
        "prefix": "dowhile",
        "body": "do = True\nwhile do or ${2:condition}:\n\tdo = False\n\t${1:body}$0",
        "description" : "Code snippet to create a do-while loop structure."
    },
    "try:except:": {
        "prefix": "try",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
        "description" : "Code Snippet for a try and except blocks."
    },
    "try:except:else:finally": {
        "prefix": "tryef",
        "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
        "description" : "Code Snippet for a try/except/finally with else statement."
    },
    "try:except:else": {
        "prefix": "trye",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
        "description" : "Code Snippet for a try/except with else statement."
    },
    "try:except:finally": {
        "prefix": "tryf",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
        "description" : "Code Snippet for a try/except/finally."
    },
    "self": {
        "prefix": "s",
        "body": "self.$0",
        "description" : "Shortend snippet to reference the self property in an object."
    },
    "__magic__": {
        "prefix": "__",
        "body": "__${1:init}__$0",
        "description" : "Code snippet to create magic methods."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "lambda": {
        "prefix": "lam",
        "body": "lambda ${1:args}: ${2:expr}",
        "description": "Create template for lambda function"
    },
    "Open file for writing": {
		"prefix": "writefile",
		"body": [
			"with open($1, w) as f:",
			"\tf.write($2)" 
		],
		"description": "Open file for writing using a with statement"
	},
	"Encoding statement": {
		"prefix": "cod",
		"body": "# -*- coding: utf-8 -*-",
		"description": "File encoding statement"
	},
	"File header comment": {
		"prefix": "fileheader",
		"body": [
			"# -*- coding: utf-8 -*-",
			"#",
			"#  $TM_FILENAME",
			"#  ${2:project}",
			"#",
			"#  Created by Andr√© Berg on $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE.",
			"#  Copyright $CURRENT_YEAR Iris VFX. All rights reserved.",
			"#",
			"#  andre@irisvfx.com",
			"#",
			"# pylint: disable-msg=F0401"
		]
	},
	"Abstract method": {
		"prefix": "abstractmethod",
		"body": [
			"def ${1:name}(self):",
			"\traise NotImplementedError(\"This method is abstract. To provide a concrete implementation override this method in a subclass.\")"
		],
		"description": "Abstract method body"
	},
  	"Print function variable": {
		"prefix": "pvar",
		"body": [
			"print('${1:func}: ${2:var} = {}'.format($2))"
		],
		"description": "Print a function local variable"
	},
	"Main entry point": {
		"prefix": "main",
		"body": [
			"def ${1:main()}:",
			"\t$0",
			"",
			"",
			"if __name__ == '__main__':",
			"\t${1:main()}"
		],
		"description": "Call entry point function if this script is run directly"
	},
	"New class with init": {
		"prefix": "class1",
		"body": [
			"class ${1:name}${2:(object)}:",
			"\tdef __init__(self, ${3:var}):",
			"\t\tself.${3:var} = ${3:var}",
			"\tdef __str__(self):",
			"\t\treturn '${1:name}@{:#x}: {}'.format(id(self), self.${3:var})"
		],
		"description": "Simple class skeleton with init and str magic methods"
	},
  	"New class with init and docstring": {
		"prefix": "class2",
		"body": [
			"class ${1:name}${2:(object)}:",
			"\t\"\"\" ${3:docstring}",
			"\t\"\"\"",
			"\tdef __init__(self, ${4:var}):",
			"\t\tself.${4:var} = ${4:var}",
			"\tdef __str__(self):",
			"\t\treturn '${1:name}@{:#x}: {}'.format(id(self), self.${4:var})",
		],
		"description": "Class definition with doctsring"
	},
	"Function decorator": {
		"prefix": "decor",
		"body": [
			"def ${1:name}(fn):",
			"\tdef ${1:name}_wrapper(*args, **kwargs):",
			"\t\tprint('{}: args={} kwargs={}'.format(fn.__name__, args, kwargs))",
			"\t\treturn fn(*args, **kwargs)",
			"\treturn ${1:name}_wrapper"
		],
		"description": "Function decorator"
	},
	"Decorated property with encapsulation": {
		"prefix": "eprop",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"\treturn self.__${1:name}",
			"@${1:name}.setter",
			"def ${1:name}(self, value):",
			"\tself.__${1:name} = value",
			"@${1:name}.deleter",
			"def ${1:name}(self, value):",
			"\tdel self.__${1:name}"
		],
		"description": "Encapsulated property getter, setter and deleter"
	},
	"Decorated property": {
		"prefix": "prop1",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"\treturn self.${1:name}",
			"@${1:name}.setter",
			"def ${1:name}(self, value):",
			"\tself.${1:name} = value",
			"@${1:name}.deleter",
			"def ${1:name}(self, value):",
			"\tdel self.${1:name}"
		],
		"description": "Property getter, setter and deleter"
	},
	"Decorated property (without deleter)": {
		"prefix": "prop2",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"\treturn self.${1:name}",
			"@${1:name}.setter",
			"def ${1:name}(self, value):",
			"\tself.${1:name} = value",
		],
		"description": "Property getter and setter"
	}
}
